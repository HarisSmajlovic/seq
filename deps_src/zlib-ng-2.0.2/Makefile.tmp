# Makefile for zlib
# Copyright (C) 1995-2016 Jean-loup Gailly, Mark Adler
# For conditions of distribution and use, see copyright notice in zlib.h

# To compile and test, type:
#    ./configure; make test
# Normally configure builds both a static and a shared library.
# If you want to build just a static library, use: ./configure --static

# To install /usr/local/lib/libz.* and /usr/local/include/zlib.h, type:
#    make install
# To install in $HOME instead of /usr/local, use:
#    make install prefix=$HOME

CC=clang

CFLAGS=-O2 -fPIC -m64 -std=c99 -Wall -D_LARGEFILE64_SOURCE=1 -DZLIB_COMPAT -DWITH_GZFILEOP -DHAVE_VISIBILITY_HIDDEN -DHAVE_VISIBILITY_INTERNAL -DHAVE_BUILTIN_CTZ -DHAVE_BUILTIN_CTZLL -DUNALIGNED_OK -DUNALIGNED64_OK -DX86_FEATURES -DX86_AVX2 -DX86_AVX2_ADLER32 -DX86_AVX_CHUNKSET -DX86_SSE42_CRC_HASH -DX86_SSE42_CRC_INTRIN -DX86_SSE42_CMP_STR -DX86_SSE2 -DX86_SSE2_CHUNKSET -DX86_SSSE3 -DX86_SSSE3_ADLER32 -DX86_PCLMULQDQ_CRC
#CFLAGS=-O -DMAX_WBITS=14 -DMAX_MEM_LEVEL=7
#CFLAGS=-g -DZLIB_DEBUG
#CFLAGS=-O3 -Wall -Wwrite-strings -Wpointer-arith -Wconversion \
#           -Wstrict-prototypes -Wmissing-prototypes

SFLAGS=-O2 -fPIC -m64 -std=c99 -Wall -fPIC -D_LARGEFILE64_SOURCE=1 -DZLIB_COMPAT -DWITH_GZFILEOP -fno-semantic-interposition -DHAVE_VISIBILITY_HIDDEN -DHAVE_VISIBILITY_INTERNAL -DHAVE_BUILTIN_CTZ -DHAVE_BUILTIN_CTZLL -DUNALIGNED_OK -DUNALIGNED64_OK -DX86_FEATURES -DX86_AVX2 -DX86_AVX2_ADLER32 -DX86_AVX_CHUNKSET -DX86_SSE42_CRC_HASH -DX86_SSE42_CRC_INTRIN -DX86_SSE42_CMP_STR -DX86_SSE2 -DX86_SSE2_CHUNKSET -DX86_SSSE3 -DX86_SSSE3_ADLER32 -DX86_PCLMULQDQ_CRC
LDFLAGS= -m64
LIBNAME1=libz
LIBNAME2=zlib
SUFFIX=
TEST_LIBS=$(LIBNAME1).a
LDSHARED=clang
LDSHAREDFLAGS=-shared -Wl,-soname,libz.so.1,--version-script,/home/hsmajlovic/sequre/pysequre/seq/deps_src/zlib-ng-2.0.2/zlib.map

VER=1.2.11.zlib-ng
VER1=1

STATICLIB=libz.a
SHAREDLIB=libz.so
SHAREDLIBV=libz.so.1.2.11.zlib-ng
SHAREDLIBM=libz.so.1
IMPORTLIB=
SHAREDTARGET=libz.so.1.2.11.zlib-ng
PKGFILE=$(LIBNAME2).pc

LIBS=$(STATICLIB) $(SHAREDTARGET)

AR=ar
ARFLAGS=rc
DEFFILE=
RC=
RCFLAGS=
RCOBJS=
STRIP=
RANLIB=ranlib
LDCONFIG=ldconfig
LDSHAREDLIBC=
EXE=

SRCDIR=/home/hsmajlovic/sequre/pysequre/seq/deps_src/zlib-ng-2.0.2
INCLUDES=-I/home/hsmajlovic/sequre/pysequre/seq/deps_src/zlib-ng-2.0.2

ARCHDIR=arch/x86
ARCH_STATIC_OBJS= x86.o slide_avx.o chunkset_avx.o compare258_avx.o adler32_avx.o insert_string_sse.o compare258_sse.o chunkset_sse.o slide_sse.o adler32_ssse3.o crc_folding.o
ARCH_SHARED_OBJS= x86.lo slide_avx.lo chunkset_avx.lo compare258_avx.lo adler32_avx.lo insert_string_sse.lo compare258_sse.lo chunkset_sse.lo slide_sse.lo adler32_ssse3.lo crc_folding.lo

prefix = /home/hsmajlovic/sequre/pysequre/seq/deps
exec_prefix = ${prefix}
bindir = ${exec_prefix}/bin
libdir = ${exec_prefix}/lib
sharedlibdir = ${libdir}
includedir = ${prefix}/include
mandir = ${prefix}/share/man
man3dir = ${mandir}/man3
pkgconfigdir = ${libdir}/pkgconfig

OBJZ = \
	adler32.o \
	chunkset.o \
	compare258.o \
	compress.o \
	crc32.o \
	crc32_comb.o \
	deflate.o \
	deflate_fast.o \
	deflate_medium.o \
	deflate_quick.o \
	deflate_slow.o \
	functable.o \
	infback.o \
	inffast.o \
	inflate.o \
	inftrees.o \
	insert_string.o \
	trees.o \
	uncompr.o \
	zutil.o \
	$(ARCH_STATIC_OBJS)

OBJG = \
	gzlib.o \
	gzread.o \
	gzwrite.o

OBJC = $(OBJZ) $(OBJG)

PIC_OBJZ = \
	adler32.lo \
	chunkset.lo \
	compare258.lo \
	compress.lo \
	crc32.lo \
	crc32_comb.lo \
	deflate.lo \
	deflate_fast.lo \
	deflate_medium.lo \
	deflate_quick.lo \
	deflate_slow.lo \
	functable.lo \
	infback.lo \
	inffast.lo \
	inflate.lo \
	inftrees.lo \
	insert_string.lo \
	trees.lo \
	uncompr.lo \
	zutil.lo \
	$(ARCH_SHARED_OBJS)

PIC_OBJG = \
	gzlib.lo \
	gzread.lo \
	gzwrite.lo

PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)

OBJS = $(OBJC)

PIC_OBJS = $(PIC_OBJC)

all: static shared

static: adler32_test$(EXE) example$(EXE) minigzip$(EXE) fuzzers makefixed$(EXE) maketrees$(EXE) makecrct$(EXE)

shared: adler32_testsh$(EXE) examplesh$(EXE) minigzipsh$(EXE)

check: test

.SECONDARY:

$(ARCHDIR)/%.o: $(SRCDIR)/$(ARCHDIR)/%.c
	$(MAKE) -C $(ARCHDIR) $(notdir $@)

$(ARCHDIR)/%.lo: $(SRCDIR)/$(ARCHDIR)/%.c
	$(MAKE) -C $(ARCHDIR) $(notdir $@)

%.o: $(ARCHDIR)/%.o
	-cp $< $@

%.lo: $(ARCHDIR)/%.lo
	-cp $< $@

test: all
	$(MAKE) -C test

# This variable is set by configure.
WITH_FUZZERS=0

# By default, use our own standalone_fuzz_target_runner.
# This runner does no fuzzing, but simply executes the inputs
# provided via parameters.
# Run e.g. "make all LIB_FUZZING_ENGINE=/path/to/libFuzzer.a"
# to link the fuzzer(s) against a real fuzzing engine.
ifeq (,$(LIB_FUZZING_ENGINE))
  LIB_FUZZING_ENGINE = standalone_fuzz_target_runner.o
else
  # OSS-Fuzz will define its own value for LIB_FUZZING_ENGINE.
  WITH_FUZZERS=1
endif

ifeq (1,$(WITH_FUZZERS))
fuzzers: checksum_fuzzer$(EXE) compress_fuzzer$(EXE) example_small_fuzzer$(EXE) example_large_fuzzer$(EXE) example_flush_fuzzer$(EXE) example_dict_fuzzer$(EXE) minigzip_fuzzer$(EXE)
else
fuzzers:
endif

# The standalone fuzz target runner.
standalone_fuzz_target_runner.o: $(SRCDIR)/test/fuzz/standalone_fuzz_target_runner.c 
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $<
checksum_fuzzer.o: $(SRCDIR)/test/fuzz/checksum_fuzzer.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $<
compress_fuzzer.o: $(SRCDIR)/test/fuzz/compress_fuzzer.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $<
example_small_fuzzer.o: $(SRCDIR)/test/fuzz/example_small_fuzzer.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $<
example_large_fuzzer.o: $(SRCDIR)/test/fuzz/example_large_fuzzer.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $<
example_flush_fuzzer.o: $(SRCDIR)/test/fuzz/example_flush_fuzzer.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $<
example_dict_fuzzer.o: $(SRCDIR)/test/fuzz/example_dict_fuzzer.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $<
minigzip_fuzzer.o: $(SRCDIR)/test/fuzz/minigzip_fuzzer.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
	$(CC) $(CFLAGS) -DWITH_GZFILEOP $(INCLUDES) -c -o $@ $<
checksum_fuzzer$(EXE): checksum_fuzzer.o standalone_fuzz_target_runner.o $(STATICLIB)
	$(CC) $(LDFLAGS) -o $@ $(LIB_FUZZING_ENGINE) checksum_fuzzer.o $(STATICLIB) -lpthread
compress_fuzzer$(EXE): compress_fuzzer.o standalone_fuzz_target_runner.o $(STATICLIB)
	$(CC) $(LDFLAGS) -o $@ $(LIB_FUZZING_ENGINE) compress_fuzzer.o $(STATICLIB) -lpthread
example_small_fuzzer$(EXE): example_small_fuzzer.o standalone_fuzz_target_runner.o $(STATICLIB)
	$(CC) $(LDFLAGS) -o $@ $(LIB_FUZZING_ENGINE) example_small_fuzzer.o $(STATICLIB) -lpthread
example_large_fuzzer$(EXE): example_large_fuzzer.o standalone_fuzz_target_runner.o $(STATICLIB)
	$(CC) $(LDFLAGS) -o $@ $(LIB_FUZZING_ENGINE) example_large_fuzzer.o $(STATICLIB) -lpthread
example_flush_fuzzer$(EXE): example_flush_fuzzer.o standalone_fuzz_target_runner.o $(STATICLIB)
	$(CC) $(LDFLAGS) -o $@ $(LIB_FUZZING_ENGINE) example_flush_fuzzer.o $(STATICLIB) -lpthread
example_dict_fuzzer$(EXE): example_dict_fuzzer.o standalone_fuzz_target_runner.o $(STATICLIB)
	$(CC) $(LDFLAGS) -o $@ $(LIB_FUZZING_ENGINE) example_dict_fuzzer.o $(STATICLIB) -lpthread
minigzip_fuzzer$(EXE): minigzip_fuzzer.o standalone_fuzz_target_runner.o $(OBJG) $(STATICLIB)
	$(CC) $(LDFLAGS) -o $@ $(LIB_FUZZING_ENGINE) minigzip_fuzzer.o $(OBJG) $(STATICLIB) -lpthread

infcover.o: $(SRCDIR)/test/infcover.c  $(SRCDIR)/inflate.h $(SRCDIR)/inftrees.h $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $(SRCDIR)/test/infcover.c

infcover$(EXE): infcover.o $(STATICLIB)
	$(CC) $(LDFLAGS) -o $@ infcover.o $(STATICLIB)
ifneq ($(STRIP),)
	$(STRIP) $@
endif

cover: infcover$(EXE)
	rm -f *.gcda
	./infcover
	gcov inf*.c

$(STATICLIB): $(OBJS)
	$(AR) $(ARFLAGS) $@ $(OBJS)
	-@ ($(RANLIB) $@ || true) >/dev/null 2>&1

adler32_test.o: $(SRCDIR)/test/adler32_test.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $(SRCDIR)/test/adler32_test.c

example.o: $(SRCDIR)/test/example.c  $(SRCDIR)/deflate.h $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
	$(CC) $(CFLAGS) -DWITH_GZFILEOP $(INCLUDES) -c -o $@ $(SRCDIR)/test/example.c

minigzip.o: $(SRCDIR)/test/minigzip.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
	$(CC) $(CFLAGS) -DWITH_GZFILEOP $(INCLUDES) -c -o $@ $(SRCDIR)/test/minigzip.c

makefixed.o: $(SRCDIR)/tools/makefixed.c  $(SRCDIR)/inflate.h $(SRCDIR)/inftrees.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $(SRCDIR)/tools/makefixed.c

maketrees.o:
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $(SRCDIR)/tools/maketrees.c

makecrct.o: $(SRCDIR)/tools/makecrct.c  $(SRCDIR)/crc32_p.h $(SRCDIR)/deflate.h $(SRCDIR)/zbuild.h
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $(SRCDIR)/tools/makecrct.c

zlibrc.o: win32/zlib$(SUFFIX)1.rc
	$(RC) $(RCFLAGS) -o $@ win32/zlib$(SUFFIX)1.rc

.SUFFIXES: .lo

%.o: $(SRCDIR)/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $<

%.lo: $(SRCDIR)/%.c
	$(CC) $(SFLAGS) -DPIC $(INCLUDES) -c -o $@ $<

$(OBJG): %.o: $(SRCDIR)/%.c
	$(CC) $(CFLAGS) -DWITH_GZFILEOP $(INCLUDES) -c -o $@ $<

$(SHAREDTARGET): $(PIC_OBJS) $(DEFFILE) $(RCOBJS)
ifneq ($(SHAREDTARGET),)
	$(LDSHARED) $(CFLAGS) $(LDSHAREDFLAGS) $(LDFLAGS) -o $@ $(DEFFILE) $(PIC_OBJS) $(RCOBJS) $(LDSHAREDLIBC)
ifneq ($(STRIP),)
	$(STRIP) $@
endif
ifneq ($(SHAREDLIB),$(SHAREDTARGET))
	rm -f $(SHAREDLIB) $(SHAREDLIBM)
	ln -s $@ $(SHAREDLIB)
	ln -s $@ $(SHAREDLIBM)
endif
endif

adler32_test$(EXE): adler32_test.o $(OBJG) $(STATICLIB)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ adler32_test.o $(OBJG) $(TEST_LIBS) $(LDSHAREDLIBC)
ifneq ($(STRIP),)
	$(STRIP) $@
endif

example$(EXE): example.o $(OBJG) $(STATICLIB)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ example.o $(OBJG) $(TEST_LIBS) $(LDSHAREDLIBC)
ifneq ($(STRIP),)
	$(STRIP) $@
endif

minigzip$(EXE): minigzip.o $(OBJG) $(STATICLIB)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ minigzip.o $(OBJG) $(TEST_LIBS) $(LDSHAREDLIBC)
ifneq ($(STRIP),)
	$(STRIP) $@
endif

adler32_testsh$(EXE): adler32_test.o $(OBJG) $(SHAREDTARGET)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ adler32_test.o $(OBJG) $(SHAREDTARGET) $(LDSHAREDLIBC)
ifneq ($(STRIP),)
	$(STRIP) $@
endif

examplesh$(EXE): example.o $(OBJG) $(SHAREDTARGET)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ example.o $(OBJG) $(SHAREDTARGET) $(LDSHAREDLIBC)
ifneq ($(STRIP),)
	$(STRIP) $@
endif

minigzipsh$(EXE): minigzip.o $(OBJG) $(SHAREDTARGET)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ minigzip.o $(OBJG) $(SHAREDTARGET) $(LDSHAREDLIBC)
ifneq ($(STRIP),)
	$(STRIP) $@
endif

makefixed$(EXE): makefixed.o $(OBJG) $(STATICLIB)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ makefixed.o $(OBJG) $(TEST_LIBS) $(LDSHAREDLIBC)
ifneq ($(STRIP),)
	$(STRIP) $@
endif

maketrees$(EXE): maketrees.o $(OBJG) $(STATICLIB)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ maketrees.o $(OBJG) $(TEST_LIBS) $(LDSHAREDLIBC)
ifneq ($(STRIP),)
	$(STRIP) $@
endif

makecrct$(EXE): makecrct.o $(OBJG) $(STATICLIB)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ makecrct.o $(OBJG) $(TEST_LIBS) $(LDSHAREDLIBC)
ifneq ($(STRIP),)
	$(STRIP) $@
endif

install-shared: $(SHAREDTARGET)
ifneq ($(SHAREDTARGET),)
	-@if [ ! -d $(DESTDIR)$(sharedlibdir) ]; then mkdir -p $(DESTDIR)$(sharedlibdir); fi
	rm -f $(DESTDIR)$(sharedlibdir)/$(SHAREDTARGET)
	cp $(SHAREDTARGET) $(DESTDIR)$(sharedlibdir)
	chmod 755 $(DESTDIR)$(sharedlibdir)/$(SHAREDTARGET)
ifneq ($(SHAREDLIB),$(SHAREDTARGET))
	rm -f $(DESTDIR)$(sharedlibdir)/$(SHAREDLIB) $(DESTDIR)$(sharedlibdir)/$(SHAREDLIBM)
	ln -s $(SHAREDLIBV) $(DESTDIR)$(sharedlibdir)/$(SHAREDLIB)
	ln -s $(SHAREDLIBV) $(DESTDIR)$(sharedlibdir)/$(SHAREDLIBM)
	($(LDCONFIG) || true)  >/dev/null 2>&1
# ldconfig is for Linux
endif
ifneq ($(IMPORTLIB),)
	cp $(IMPORTLIB) $(DESTDIR)$(sharedlibdir)
	chmod 644 $(DESTDIR)$(sharedlibdir)/$(IMPORTLIB)
endif
endif

install-static: $(STATICLIB)
	-@if [ ! -d $(DESTDIR)$(libdir)       ]; then mkdir -p $(DESTDIR)$(libdir); fi
	rm -f $(DESTDIR)$(libdir)/$(STATICLIB)
	cp $(STATICLIB) $(DESTDIR)$(libdir)
	chmod 644 $(DESTDIR)$(libdir)/$(STATICLIB)
	-@($(RANLIB) $(DESTDIR)$(libdir)/$(STATICLIB) || true) >/dev/null 2>&1
# The ranlib in install-static is needed on NeXTSTEP which checks file times

install-libs: install-shared install-static
	-@if [ ! -d $(DESTDIR)$(man3dir)      ]; then mkdir -p $(DESTDIR)$(man3dir); fi
	-@if [ ! -d $(DESTDIR)$(pkgconfigdir) ]; then mkdir -p $(DESTDIR)$(pkgconfigdir); fi
	rm -f $(DESTDIR)$(pkgconfigdir)/$(PKGFILE)
	cp $(PKGFILE) $(DESTDIR)$(pkgconfigdir)
	chmod 644 $(DESTDIR)$(pkgconfigdir)/$(PKGFILE)

install: install-libs
	-@if [ ! -d $(DESTDIR)$(includedir)   ]; then mkdir -p $(DESTDIR)$(includedir); fi
	rm -f $(DESTDIR)$(includedir)/zlib$(SUFFIX).h $(DESTDIR)$(includedir)/zconf$(SUFFIX).h
	cp $(SRCDIR)/zlib$(SUFFIX).h $(DESTDIR)$(includedir)/zlib$(SUFFIX).h
	cp zconf$(SUFFIX).h $(DESTDIR)$(includedir)/zconf$(SUFFIX).h
	chmod 644 $(DESTDIR)$(includedir)/zlib$(SUFFIX).h $(DESTDIR)$(includedir)/zconf$(SUFFIX).h

uninstall-static:
	cd $(DESTDIR)$(libdir) && rm -f $(STATICLIB)

uninstall-shared:
ifneq ($(SHAREDLIB),)
	cd $(DESTDIR)$(sharedlibdir) && rm -f $(SHAREDLIBV) $(SHAREDLIB) $(SHAREDLIBM)
endif
ifneq ($(IMPORTLIB),)
	cd $(DESTDIR)$(sharedlibdir) && rm -f $(IMPORTLIB)
endif

uninstall: uninstall-static uninstall-shared
	cd $(DESTDIR)$(includedir) && rm -f zlib$(SUFFIX).h zconf$(SUFFIX).h
	cd $(DESTDIR)$(pkgconfigdir) && rm -f $(PKGFILE)

mostlyclean: clean
clean:
	@if [ -f $(ARCHDIR)/Makefile ]; then $(MAKE) -C $(ARCHDIR) clean; fi
	@if [ -f test/Makefile ]; then $(MAKE) -C test clean; fi
	rm -f *.o *.lo *~ \
	   adler32_test$(EXE) example$(EXE) minigzip$(EXE) \
	   adler32_testsh$(EXE) examplesh$(EXE) minigzipsh$(EXE) \
	   checksum_fuzzer$(EXE) compress_fuzzer$(EXE) example_small_fuzzer$(EXE) example_large_fuzzer$(EXE) \
	   example_flush_fuzzer$(EXE) example_dict_fuzzer$(EXE) minigzip_fuzzer$(EXE) \
	   infcover makefixed$(EXE) maketrees$(EXE) makecrct$(EXE) \
	   $(STATICLIB) $(IMPORTLIB) $(SHAREDLIB) $(SHAREDLIBV) $(SHAREDLIBM) \
	   foo.gz so_locations \
	   _match.s maketree
	rm -rf objs
	rm -f *.gcda *.gcno *.gcov
	rm -f a.out a.exe
	rm -f *.pc
	rm -f *._h
	rm -rf btmp1 btmp2 pkgtmp1 pkgtmp2

maintainer-clean: distclean
distclean: clean
	@if [ -f $(ARCHDIR)/Makefile ]; then $(MAKE) -C $(ARCHDIR) distclean; fi
	@if [ -f test/Makefile ]; then $(MAKE) -C test distclean; fi
	rm -f $(PKGFILE) configure.log zconf.h zconf.h.cmakein
	-@rm -f .DS_Store
# Reset Makefile if building inside source tree
	@if [ -f Makefile.in ]; then \
	printf 'all:\n\t-@echo "Please use ./configure first.  Thank you."\n' > Makefile ; \
	printf '\ndistclean:\n\t$(MAKE) -f Makefile.in distclean\n' >> Makefile ; \
	touch -r $(SRCDIR)/Makefile.in Makefile ; fi
# Reset zconf.h and zconf.h.cmakein if building inside source tree
	@if [ -f zconf.h.in ]; then \
	cp -p $(SRCDIR)/zconf.h.in zconf.h ; \
	grep -v '^#cmakedefine' $(SRCDIR)/zconf.h.in > zconf.h.cmakein &&\
	touch -r $(SRCDIR)/zconf.h.in zconf.h.cmakein ; fi
# Cleanup these files if building outside source tree
	@if [ ! -f README.md ]; then rm -f Makefile; fi
# Remove arch and test directory if building outside source tree
	@if [ ! -f $(ARCHDIR)/Makefile.in ]; then rm -rf arch; fi
	@if [ ! -f test/Makefile.in ]; then rm -rf test; fi

tags:
	etags $(SRCDIR)/*.[ch]
adler32.o: $(SRCDIR)/adler32.c  $(SRCDIR)/adler32_p.h $(SRCDIR)/functable.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
adler32.lo: $(SRCDIR)/adler32.c  $(SRCDIR)/adler32_p.h $(SRCDIR)/functable.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
adler32_avx.o: $(SRCDIR)/arch/x86/adler32_avx.c  $(SRCDIR)/arch/x86/../../adler32_p.h $(SRCDIR)/arch/x86/../../zbuild.h $(SRCDIR)/arch/x86/../../zutil.h
arch/x86/adler32_avx.o: $(SRCDIR)/arch/x86/adler32_avx.c  $(SRCDIR)/arch/x86/../../adler32_p.h $(SRCDIR)/arch/x86/../../zbuild.h $(SRCDIR)/arch/x86/../../zutil.h
adler32_avx.lo: $(SRCDIR)/arch/x86/adler32_avx.c  $(SRCDIR)/arch/x86/../../adler32_p.h $(SRCDIR)/arch/x86/../../zbuild.h $(SRCDIR)/arch/x86/../../zutil.h
adler32_ssse3.o: $(SRCDIR)/arch/x86/adler32_ssse3.c  $(SRCDIR)/arch/x86/../../adler32_p.h $(SRCDIR)/arch/x86/../../zbuild.h $(SRCDIR)/arch/x86/../../zutil.h
arch/x86/adler32_ssse3.o: $(SRCDIR)/arch/x86/adler32_ssse3.c  $(SRCDIR)/arch/x86/../../adler32_p.h $(SRCDIR)/arch/x86/../../zbuild.h $(SRCDIR)/arch/x86/../../zutil.h
adler32_ssse3.lo: $(SRCDIR)/arch/x86/adler32_ssse3.c  $(SRCDIR)/arch/x86/../../adler32_p.h $(SRCDIR)/arch/x86/../../zbuild.h $(SRCDIR)/arch/x86/../../zutil.h
chunkset_avx.o: $(SRCDIR)/arch/x86/chunkset_avx.c  $(SRCDIR)/chunkset_tpl.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
arch/x86/chunkset_avx.o: $(SRCDIR)/arch/x86/chunkset_avx.c  $(SRCDIR)/chunkset_tpl.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
chunkset_avx.lo: $(SRCDIR)/arch/x86/chunkset_avx.c  $(SRCDIR)/chunkset_tpl.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
chunkset_sse.o: $(SRCDIR)/arch/x86/chunkset_sse.c  $(SRCDIR)/chunkset_tpl.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
arch/x86/chunkset_sse.o: $(SRCDIR)/arch/x86/chunkset_sse.c  $(SRCDIR)/chunkset_tpl.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
chunkset_sse.lo: $(SRCDIR)/arch/x86/chunkset_sse.c  $(SRCDIR)/chunkset_tpl.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
compare258_avx.o: $(SRCDIR)/arch/x86/compare258_avx.c  $(SRCDIR)/fallback_builtins.h $(SRCDIR)/match_tpl.h $(SRCDIR)/arch/x86/../../zbuild.h $(SRCDIR)/arch/x86/../../zutil.h
arch/x86/compare258_avx.o: $(SRCDIR)/arch/x86/compare258_avx.c  $(SRCDIR)/fallback_builtins.h $(SRCDIR)/match_tpl.h $(SRCDIR)/arch/x86/../../zbuild.h $(SRCDIR)/arch/x86/../../zutil.h
compare258_avx.lo: $(SRCDIR)/arch/x86/compare258_avx.c  $(SRCDIR)/fallback_builtins.h $(SRCDIR)/match_tpl.h $(SRCDIR)/arch/x86/../../zbuild.h $(SRCDIR)/arch/x86/../../zutil.h
compare258_sse.o: $(SRCDIR)/arch/x86/compare258_sse.c  $(SRCDIR)/match_tpl.h $(SRCDIR)/arch/x86/../../zbuild.h $(SRCDIR)/arch/x86/../../zutil.h
arch/x86/compare258_sse.o: $(SRCDIR)/arch/x86/compare258_sse.c  $(SRCDIR)/match_tpl.h $(SRCDIR)/arch/x86/../../zbuild.h $(SRCDIR)/arch/x86/../../zutil.h
compare258_sse.lo: $(SRCDIR)/arch/x86/compare258_sse.c  $(SRCDIR)/match_tpl.h $(SRCDIR)/arch/x86/../../zbuild.h $(SRCDIR)/arch/x86/../../zutil.h
crc_folding.o: $(SRCDIR)/arch/x86/crc_folding.c  $(SRCDIR)/arch/x86/crc_folding.h $(SRCDIR)/arch/x86/../../zbuild.h
arch/x86/crc_folding.o: $(SRCDIR)/arch/x86/crc_folding.c  $(SRCDIR)/arch/x86/crc_folding.h $(SRCDIR)/arch/x86/../../zbuild.h
crc_folding.lo: $(SRCDIR)/arch/x86/crc_folding.c  $(SRCDIR)/arch/x86/crc_folding.h $(SRCDIR)/arch/x86/../../zbuild.h
insert_string_sse.o: $(SRCDIR)/arch/x86/insert_string_sse.c  $(SRCDIR)/arch/x86/../../deflate.h $(SRCDIR)/arch/x86/../../insert_string_tpl.h $(SRCDIR)/arch/x86/../../zbuild.h
arch/x86/insert_string_sse.o: $(SRCDIR)/arch/x86/insert_string_sse.c  $(SRCDIR)/arch/x86/../../deflate.h $(SRCDIR)/arch/x86/../../insert_string_tpl.h $(SRCDIR)/arch/x86/../../zbuild.h
insert_string_sse.lo: $(SRCDIR)/arch/x86/insert_string_sse.c  $(SRCDIR)/arch/x86/../../deflate.h $(SRCDIR)/arch/x86/../../insert_string_tpl.h $(SRCDIR)/arch/x86/../../zbuild.h
slide_avx.o: $(SRCDIR)/arch/x86/slide_avx.c  $(SRCDIR)/arch/x86/../../deflate.h $(SRCDIR)/arch/x86/../../zbuild.h
arch/x86/slide_avx.o: $(SRCDIR)/arch/x86/slide_avx.c  $(SRCDIR)/arch/x86/../../deflate.h $(SRCDIR)/arch/x86/../../zbuild.h
slide_avx.lo: $(SRCDIR)/arch/x86/slide_avx.c  $(SRCDIR)/arch/x86/../../deflate.h $(SRCDIR)/arch/x86/../../zbuild.h
slide_sse.o: $(SRCDIR)/arch/x86/slide_sse.c  $(SRCDIR)/arch/x86/../../deflate.h $(SRCDIR)/arch/x86/../../zbuild.h
arch/x86/slide_sse.o: $(SRCDIR)/arch/x86/slide_sse.c  $(SRCDIR)/arch/x86/../../deflate.h $(SRCDIR)/arch/x86/../../zbuild.h
slide_sse.lo: $(SRCDIR)/arch/x86/slide_sse.c  $(SRCDIR)/arch/x86/../../deflate.h $(SRCDIR)/arch/x86/../../zbuild.h
x86.o: $(SRCDIR)/arch/x86/x86.c  $(SRCDIR)/arch/x86/../../zutil.h
arch/x86/x86.o: $(SRCDIR)/arch/x86/x86.c  $(SRCDIR)/arch/x86/../../zutil.h
x86.lo: $(SRCDIR)/arch/x86/x86.c  $(SRCDIR)/arch/x86/../../zutil.h
chunkset.o: $(SRCDIR)/chunkset.c  $(SRCDIR)/chunkset_tpl.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
chunkset.lo: $(SRCDIR)/chunkset.c  $(SRCDIR)/chunkset_tpl.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
compare258.o: $(SRCDIR)/compare258.c  $(SRCDIR)/fallback_builtins.h $(SRCDIR)/match_tpl.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
compare258.lo: $(SRCDIR)/compare258.c  $(SRCDIR)/fallback_builtins.h $(SRCDIR)/match_tpl.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
compress.o: $(SRCDIR)/compress.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
compress.lo: $(SRCDIR)/compress.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
crc32.o: $(SRCDIR)/crc32.c  $(SRCDIR)/arch/x86/crc_folding.h $(SRCDIR)/arch/x86/x86.h $(SRCDIR)/crc32_tbl.h $(SRCDIR)/deflate.h $(SRCDIR)/functable.h $(SRCDIR)/zbuild.h $(SRCDIR)/zendian.h
crc32.lo: $(SRCDIR)/crc32.c  $(SRCDIR)/arch/x86/crc_folding.h $(SRCDIR)/arch/x86/x86.h $(SRCDIR)/crc32_tbl.h $(SRCDIR)/deflate.h $(SRCDIR)/functable.h $(SRCDIR)/zbuild.h $(SRCDIR)/zendian.h
crc32_comb.o: $(SRCDIR)/crc32_comb.c  $(SRCDIR)/crc32_comb_tbl.h $(SRCDIR)/crc32_p.h $(SRCDIR)/deflate.h $(SRCDIR)/zbuild.h
crc32_comb.lo: $(SRCDIR)/crc32_comb.c  $(SRCDIR)/crc32_comb_tbl.h $(SRCDIR)/crc32_p.h $(SRCDIR)/deflate.h $(SRCDIR)/zbuild.h
deflate.o: $(SRCDIR)/deflate.c  $(SRCDIR)/arch/s390/dfltcc_deflate.h $(SRCDIR)/deflate.h $(SRCDIR)/deflate_p.h $(SRCDIR)/functable.h $(SRCDIR)/zbuild.h
deflate.lo: $(SRCDIR)/deflate.c  $(SRCDIR)/arch/s390/dfltcc_deflate.h $(SRCDIR)/deflate.h $(SRCDIR)/deflate_p.h $(SRCDIR)/functable.h $(SRCDIR)/zbuild.h
deflate_fast.o: $(SRCDIR)/deflate_fast.c  $(SRCDIR)/deflate.h $(SRCDIR)/deflate_p.h $(SRCDIR)/functable.h $(SRCDIR)/zbuild.h
deflate_fast.lo: $(SRCDIR)/deflate_fast.c  $(SRCDIR)/deflate.h $(SRCDIR)/deflate_p.h $(SRCDIR)/functable.h $(SRCDIR)/zbuild.h
deflate_medium.o: $(SRCDIR)/deflate_medium.c  $(SRCDIR)/deflate.h $(SRCDIR)/deflate_p.h $(SRCDIR)/functable.h $(SRCDIR)/zbuild.h
deflate_medium.lo: $(SRCDIR)/deflate_medium.c  $(SRCDIR)/deflate.h $(SRCDIR)/deflate_p.h $(SRCDIR)/functable.h $(SRCDIR)/zbuild.h
deflate_quick.o: $(SRCDIR)/deflate_quick.c  $(SRCDIR)/deflate.h $(SRCDIR)/deflate_p.h $(SRCDIR)/functable.h $(SRCDIR)/trees_emit.h $(SRCDIR)/zbuild.h
deflate_quick.lo: $(SRCDIR)/deflate_quick.c  $(SRCDIR)/deflate.h $(SRCDIR)/deflate_p.h $(SRCDIR)/functable.h $(SRCDIR)/trees_emit.h $(SRCDIR)/zbuild.h
deflate_slow.o: $(SRCDIR)/deflate_slow.c  $(SRCDIR)/deflate.h $(SRCDIR)/deflate_p.h $(SRCDIR)/functable.h $(SRCDIR)/zbuild.h
deflate_slow.lo: $(SRCDIR)/deflate_slow.c  $(SRCDIR)/deflate.h $(SRCDIR)/deflate_p.h $(SRCDIR)/functable.h $(SRCDIR)/zbuild.h
functable.o: $(SRCDIR)/functable.c  $(SRCDIR)/deflate.h $(SRCDIR)/deflate_p.h $(SRCDIR)/fallback_builtins.h $(SRCDIR)/functable.h $(SRCDIR)/zbuild.h $(SRCDIR)/zendian.h
functable.lo: $(SRCDIR)/functable.c  $(SRCDIR)/deflate.h $(SRCDIR)/deflate_p.h $(SRCDIR)/fallback_builtins.h $(SRCDIR)/functable.h $(SRCDIR)/zbuild.h $(SRCDIR)/zendian.h
gzlib.o: $(SRCDIR)/gzlib.c  $(SRCDIR)/gzguts.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil_p.h
gzlib.lo: $(SRCDIR)/gzlib.c  $(SRCDIR)/gzguts.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil_p.h
gzread.o: $(SRCDIR)/gzread.c  $(SRCDIR)/gzguts.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil_p.h
gzread.lo: $(SRCDIR)/gzread.c  $(SRCDIR)/gzguts.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil_p.h
gzwrite.o: $(SRCDIR)/gzwrite.c  $(SRCDIR)/gzguts.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil_p.h
gzwrite.lo: $(SRCDIR)/gzwrite.c  $(SRCDIR)/gzguts.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil_p.h
infback.o: $(SRCDIR)/infback.c  $(SRCDIR)/functable.h $(SRCDIR)/inffast.h $(SRCDIR)/inflate.h $(SRCDIR)/inflate_p.h $(SRCDIR)/inftrees.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
infback.lo: $(SRCDIR)/infback.c  $(SRCDIR)/functable.h $(SRCDIR)/inffast.h $(SRCDIR)/inflate.h $(SRCDIR)/inflate_p.h $(SRCDIR)/inftrees.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
inffast.o: $(SRCDIR)/inffast.c  $(SRCDIR)/functable.h $(SRCDIR)/inffast.h $(SRCDIR)/inflate.h $(SRCDIR)/inflate_p.h $(SRCDIR)/inftrees.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
inffast.lo: $(SRCDIR)/inffast.c  $(SRCDIR)/functable.h $(SRCDIR)/inffast.h $(SRCDIR)/inflate.h $(SRCDIR)/inflate_p.h $(SRCDIR)/inftrees.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
inflate.o: $(SRCDIR)/inflate.c  $(SRCDIR)/arch/s390/dfltcc_inflate.h $(SRCDIR)/functable.h $(SRCDIR)/inffast.h $(SRCDIR)/inffixed_tbl.h $(SRCDIR)/inflate.h $(SRCDIR)/inflate_p.h $(SRCDIR)/inftrees.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
inflate.lo: $(SRCDIR)/inflate.c  $(SRCDIR)/arch/s390/dfltcc_inflate.h $(SRCDIR)/functable.h $(SRCDIR)/inffast.h $(SRCDIR)/inffixed_tbl.h $(SRCDIR)/inflate.h $(SRCDIR)/inflate_p.h $(SRCDIR)/inftrees.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
inftrees.o: $(SRCDIR)/inftrees.c  $(SRCDIR)/inftrees.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
inftrees.lo: $(SRCDIR)/inftrees.c  $(SRCDIR)/inftrees.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
insert_string.o: $(SRCDIR)/insert_string.c  $(SRCDIR)/deflate.h $(SRCDIR)/insert_string_tpl.h $(SRCDIR)/zbuild.h
insert_string.lo: $(SRCDIR)/insert_string.c  $(SRCDIR)/deflate.h $(SRCDIR)/insert_string_tpl.h $(SRCDIR)/zbuild.h
adler32_test.lo: $(SRCDIR)/test/adler32_test.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
test.o: $(SRCDIR)/test.c 
test.lo: $(SRCDIR)/test.c 
CVE-2003-0107.o: $(SRCDIR)/test/CVE-2003-0107.c 
CVE-2003-0107.lo: $(SRCDIR)/test/CVE-2003-0107.c 
deflate_quick_bi_valid.o: $(SRCDIR)/test/deflate_quick_bi_valid.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
deflate_quick_bi_valid.lo: $(SRCDIR)/test/deflate_quick_bi_valid.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
deflate_quick_block_open.o: $(SRCDIR)/test/deflate_quick_block_open.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
deflate_quick_block_open.lo: $(SRCDIR)/test/deflate_quick_block_open.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
example.lo: $(SRCDIR)/test/example.c  $(SRCDIR)/deflate.h $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
checksum_fuzzer.lo: $(SRCDIR)/test/fuzz/checksum_fuzzer.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
compress_fuzzer.lo: $(SRCDIR)/test/fuzz/compress_fuzzer.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
example_dict_fuzzer.lo: $(SRCDIR)/test/fuzz/example_dict_fuzzer.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
example_flush_fuzzer.lo: $(SRCDIR)/test/fuzz/example_flush_fuzzer.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
example_large_fuzzer.lo: $(SRCDIR)/test/fuzz/example_large_fuzzer.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
example_small_fuzzer.lo: $(SRCDIR)/test/fuzz/example_small_fuzzer.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
minigzip_fuzzer.lo: $(SRCDIR)/test/fuzz/minigzip_fuzzer.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
standalone_fuzz_target_runner.lo: $(SRCDIR)/test/fuzz/standalone_fuzz_target_runner.c 
hash_head_0.o: $(SRCDIR)/test/hash_head_0.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
hash_head_0.lo: $(SRCDIR)/test/hash_head_0.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
infcover.lo: $(SRCDIR)/test/infcover.c  $(SRCDIR)/inflate.h $(SRCDIR)/inftrees.h $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
minideflate.o: $(SRCDIR)/test/minideflate.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
minideflate.lo: $(SRCDIR)/test/minideflate.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
minigzip.lo: $(SRCDIR)/test/minigzip.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
switchlevels.o: $(SRCDIR)/test/switchlevels.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
switchlevels.lo: $(SRCDIR)/test/switchlevels.c  $(SRCDIR)/zbuild.h $(SRCDIR)/zlib.h $(SRCDIR)/zlib-ng.h
makecrct.lo: $(SRCDIR)/tools/makecrct.c  $(SRCDIR)/crc32_p.h $(SRCDIR)/deflate.h $(SRCDIR)/zbuild.h
makefixed.lo: $(SRCDIR)/tools/makefixed.c  $(SRCDIR)/inflate.h $(SRCDIR)/inftrees.h $(SRCDIR)/zbuild.h $(SRCDIR)/zutil.h
