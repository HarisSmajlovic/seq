import random
from sortedlist import SortedList
from itertools import chain

@test
def test_init():
    slt = SortedList[int]()
    assert slt.key is None
    slt._check()

    slt = SortedList[int]()
    slt._reset(10000)
    assert slt._load == 10000
    slt._check()

    # slt = SortedList[int](range(10000)) - changed due to lack of optional arguments
    slt = SortedList[int]()
    slt.update(list[int](range(10000)))
    assert all(tup[0] == tup[1] for tup in zip(slt, range(10000)))

    slt.clear()
    assert slt._len == 0
    assert slt._maxes == list[int]()
    assert slt._lists == list[list[int]]()
    slt._check()
test_init()

@test
def test_add():
    random.seed(0)
    slt = SortedList[int]()
    for val in range(1000):
        slt.add(val)
        slt._check()
    
    slt2 = SortedList[int]()
    for val in range(1000, 0, -1):
        slt2.add(val)
        slt2._check()

    slt3 = SortedList[float]()
    for val in range(1000):
        slt3.add(random.random())
        slt3._check()
test_add()

@test
def test_update():
    slt = SortedList[int]()

    slt.update(list[int](range(1000)))
    assert len(slt) == 1000
    slt._check()

    slt.update(list[int](range(100)))
    assert len(slt) == 1100
    slt._check()

    slt.update(list[int](range(10000)))
    assert len(slt) == 11100
    slt._check()

    values = sorted(list[int](range(1000)) + list[int](range(100)) + list[int](range(10000)))
    assert all(tup[0] == tup[1] for tup in zip(slt, values))
test_update()

@test
def test_contains():
    slt = SortedList[int]()
    assert 0 not in slt

    slt.update(list[int](range(10000)))

    for val in range(10000):
        assert val in slt

    assert 10000 not in slt

    slt._check
test_contains()



